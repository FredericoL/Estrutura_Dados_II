//Aluno: Frederico Luck de Oliveira
//Turma: Estrutura de Dados II, CC6N

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definição da estrutura de um nó da árvore binária
struct NoArvore {
  int dado;                      // Valor armazenado no nó
  struct NoArvore *esq;          // Ponteiro para o filho esquerdo
  struct NoArvore *dir;          // Ponteiro para o filho direito
};

// Função para criar um novo nó com o dado fornecido
struct NoArvore *CreateNode(int dado){
  struct NoArvore *novoNo = (struct NoArvore *)malloc(sizeof(struct NoArvore));
  novoNo->dado = dado;           // Inicializa o valor do nó
  novoNo->esq = NULL;            // Inicializa o ponteiro esquerdo como NULL
  novoNo->dir = NULL;            // Inicializa o ponteiro direito como NULL
  return novoNo;
}

// Função para inserir um elemento na árvore binária de busca
struct NoArvore* insert(struct NoArvore* raiz, int dado) {
    if (raiz == NULL) {
        return CreateNode(dado); // Se a raiz é NULL, cria um novo nó e retorna
    }
    if (dado < raiz->dado) {
        raiz->esq = insert(raiz->esq, dado); // Insere na subárvore esquerda se o dado for menor
    } else if (dado > raiz->dado) {
        raiz->dir = insert(raiz->dir, dado); // Insere na subárvore direita se o dado for maior
    }
    return raiz; // Retorna a raiz (inalterada)
}

// Função para pesquisar um elemento na árvore binária de busca
struct NoArvore* procurarElemento(struct NoArvore* raiz, int dado) {
    if (raiz == NULL || raiz->dado == dado) {
        return raiz; // Retorna o nó se encontrado ou NULL se não existir
    }
    if (dado < raiz->dado) {
        return procurarElemento(raiz->esq, dado); // Pesquisa na subárvore esquerda
    }
    return procurarElemento(raiz->dir, dado); // Pesquisa na subárvore direita
}

// Função auxiliar para encontrar o nó com o menor valor na árvore
struct NoArvore* acharMenor(struct NoArvore* raiz) {
    while (raiz->esq != NULL) {
        raiz = raiz->esq; // Continua movendo para a esquerda até encontrar o menor valor
    }
    return raiz; // Retorna o nó com o menor valor
}

// Função para excluir um elemento da árvore binária de busca
struct NoArvore *deletarElemento(struct NoArvore *raiz, int valor) {
    if (raiz == NULL) {
        return raiz; // Se a raiz é NULL, nada a ser feito
    }

    if (valor < raiz->dado) {
        raiz->esq = deletarElemento(raiz->esq, valor); // Procura na subárvore esquerda
    } else if (valor > raiz->dado) {
        raiz->dir = deletarElemento(raiz->dir, valor); // Procura na subárvore direita
    } else {
        // Caso 1: Nó sem filhos ou com apenas um filho
        if (raiz->esq == NULL) {
            struct NoArvore *temp = raiz->dir;
            free(raiz); // Libera o nó atual
            return temp; // Retorna o filho direito (ou NULL)
        } else if (raiz->dir == NULL) {
            struct NoArvore *temp = raiz->esq;
            free(raiz); // Libera o nó atual
            return temp; // Retorna o filho esquerdo (ou NULL)
        }

        // Caso 2: Nó com dois filhos, encontra o sucessor em ordem (menor valor na subárvore direita)
        struct NoArvore *temp = acharMenor(raiz->dir);
        raiz->dado = temp->dado; // Substitui o valor do nó pelo do sucessor em ordem
        raiz->dir = deletarElemento(raiz->dir, temp->dado); // Remove o sucessor em ordem
    }
    return raiz; // Retorna a raiz da subárvore modificada
}

// Função para imprimir a árvore em ordem (in-order traversal)
void inOrder(struct NoArvore* raiz) {
    if (raiz != NULL) {
        inOrder(raiz->esq); // Visita o filho esquerdo
        printf("%d ", raiz->dado); // Imprime o valor do nó
        inOrder(raiz->dir); // Visita o filho direito
    }
}

// Função principal
int main() {
    struct NoArvore* raiz = NULL;

    // Inserção de elementos na árvore
    raiz = insert(raiz, 12);
    raiz = insert(raiz, 56);
    raiz = insert(raiz, 6);
    raiz = insert(raiz, 32);
    raiz = insert(raiz, 2);
    raiz = insert(raiz, 10);
    raiz = insert(raiz, 80);

    // Impressão da árvore em ordem
    printf("Árvore em ordem: ");
    inOrder(raiz);
    printf("\n");

    // Exclusão de elementos e impressão da árvore após cada exclusão
    raiz = deletarElemento(raiz, 56);
    printf("Após excluir 56: ");
    inOrder(raiz);
    printf("\n");

    raiz = deletarElemento(raiz, 10);
    printf("Após excluir 10: ");
    inOrder(raiz);
    printf("\n");

    // Pesquisa de um elemento na árvore
    struct NoArvore* elementoEncontrado = procurarElemento(raiz, 12);
    if (elementoEncontrado != NULL) {
        printf("Elemento encontrado.\n");
    } else {
        printf("Elemento não encontrado.\n");
    }

    return 0; // Fim do programa
}
